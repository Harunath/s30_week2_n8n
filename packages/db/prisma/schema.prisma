// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                  String  @id @default(cuid())
  email               String  @unique
  password            String
  name                String?
  emailVerified       Boolean
  Credentials         Credentials[]
  Workflows           Workflow[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model VerifyEmail {
  id                  String @id  @default(cuid())
  email               String  @unique
  otp                 String
  expireAt            DateTime
  attempts            Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Credentials {
  id                  String @id @default(cuid())
  name                String
  apiKey              String
  userId              String
  User                User    @relation(fields: [userId],references: [id])
  CredentialsId       String
  CredentialsObjects  CredentialsObjects  @relation(fields: [CredentialsId], references: [id])

  Nodes                Node[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model CredentialsObjects {
  id                  String @id @default(cuid())
  name                String
  value               String
  Credentials         Credentials[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum NodeType {
  TRIGGER_MANUAL
  TRIGGER_WEBHOOK
  ACTION
  // LOGIC      // IF/ELSE, SWITCH, MERGE, etc.
  // UTILITY    // SET, MAP, CODE, DELAY, etc.
}

model AvaliableIntegrations {
  id                  String @id @default(cuid())
  name                String
  icon                String
  node                Node[]
  type                NodeType
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([name])
}



model Workflow {
  id           String    @id @default(cuid())
  name         String
  description  String? 

  canvasZoom   Float?
  canvasX      Float?
  canvasY      Float?

  nodes        Node[]
  connections  Connection[]


  userId      String
  User        User      @relation(fields: [userId],references: [id])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([name])
}

model Node {
  id          String    @id @default(cuid())
  workflowId  String
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  name        String

  credentialsId   String
  credentials      Credentials    @relation(fields: [credentialsId],references: [id])

  AvaliableIntegrationsId  String
  AvaliableIntegrations    AvaliableIntegrations   @relation(fields: [AvaliableIntegrationsId],references: [id])

  x           Float
  y           Float

  idx         Int?
  @@unique([workflowId, idx])

  // Opposite relation fields for Connection model
  fromConnections Connection[] @relation("FromNode")
  toConnections   Connection[] @relation("ToNode")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([workflowId])
}

model Connection {
  id            String   @id @default(cuid())

  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  fromNodeId  String
  fromNode    Node     @relation("FromNode", fields: [fromNodeId], references: [id], onDelete: Cascade)

  toNodeId    String
  toNode      Node     @relation("ToNode", fields: [toNodeId], references: [id], onDelete: Cascade)

  // optional: which output port/index of the from node, and input port/index of the to node
  fromPort      String?  // e.g., "main"
  fromIndex     Int?     // e.g., output 0, 1, ...
  toPort        String?  // e.g., "main"
  toIndex       Int?

  // optional: condition (for IF/branch)
  condition     Json?    // e.g., { "expr": "...", "on": "item.value" }

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Uniqueness: one edge per (workflow, fromNode, fromPort, fromIndex, toNode, toPort, toIndex)
  @@unique([workflowId, fromNodeId, fromPort, fromIndex, toNodeId, toPort, toIndex])
  @@index([workflowId, fromNodeId])
  @@index([workflowId, toNodeId])
}
